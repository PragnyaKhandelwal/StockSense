#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QStackedWidget>
#include <QTimer>
#include <QList>

QT_BEGIN_NAMESPACE
class QVBoxLayout;
class QHBoxLayout;
class QGridLayout;
class QLabel;
class QPushButton;
class QLineEdit;
class QScrollArea;
class QChartView;
class QComboBox;
class QCheckBox;
class QButtonGroup;
class QSpinBox;
class QProgressBar;
class QTabWidget;
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    void on_actionAbout_triggered();
    void showDashboard() { m_stackedWidget->setCurrentIndex(0); }
    void showWatchlist() { m_stackedWidget->setCurrentIndex(1); }
    void showPredictions() { m_stackedWidget->setCurrentIndex(2); }
    void showPortfolio() { m_stackedWidget->setCurrentIndex(3); }
    void showNews() { m_stackedWidget->setCurrentIndex(4); }
    void showScanner() { m_stackedWidget->setCurrentIndex(5); }
    void showSettings() { m_stackedWidget->setCurrentIndex(6); }
    void toggleTheme();
    void updateTicker();

private:
    // UI Setup Methods
    void setupUI();
    void setupHeader(QVBoxLayout* layout);
    void setupSidebar(QHBoxLayout* layout);
    QPushButton* createNavButton(const QString& icon, const QString& text, const QString& description);
    
    // Page Setup Methods
    void setupDashboardPage();
    void setupWatchlistPage();
    void setupPortfolioPage();
    void setupPredictionsPage();
    void setupNewsPage();
    void setupScannerPage();
    void setupSettingsPage();
    
    // Dashboard Components
    void setupMarketTicker(QVBoxLayout* parentLayout);
    QWidget* createTickerItem(const QString& symbol);
    QWidget* setupAdvancedStockChart();
    QChartView* createAdvancedChartView();
    QWidget* setupTechnicalIndicators();
    QWidget* setupQuickStatsPanel();
    QWidget* setupMarketOverview();
    QWidget* setupSentimentAnalysis();
    QWidget* setupGainersLosers();
    QWidget* createMoverRow(const QString& symbol, bool isGainer);
    QWidget* setupNewsPanel();
    QWidget* setupDataStructuresAnalyzer();
    QWidget* setupAlgorithmMonitor();
    QWidget* setupPerformanceMetrics();
    
    // Helper Methods
    QWidget* createDashboardCard(const QString& title, const QString& accentColor = "#3b82f6");
    QWidget* createCard(const QString& title);
    void applyTheme();

private:
    Ui::MainWindow *ui;
    
    // UI Components
    QStackedWidget* m_stackedWidget;
    QScrollArea* m_scrollArea;
    QTimer* m_tickerTimer;
    QList<QPushButton*> m_navButtons;
    
    // Data
    QString m_selectedStock;
    bool m_darkTheme;
    QStringList m_watchlist;
};

#endif // MAINWINDOW_H
